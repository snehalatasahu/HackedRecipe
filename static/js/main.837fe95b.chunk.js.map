{"version":3,"sources":["logo.svg","components/Cards.js","components/CardSection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","recipe","time","Card","className","style","borderRadius","CardImg","top","width","src","image","alt","borderTopLeftRadius","borderTopRightRadius","CardBody","CardTitle","name","CardSubtitle","CardText","description","CardSection","useState","setRecipe","fetchRecipe","a","Axios","get","results","console","log","data","useEffect","CardColumns","length","map","item","App","document","body","backgroundColor","Container","Row","height","Col","Form","FormGroup","InputGroup","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,gNCkB5BC,EAbD,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,OAA2B,IAAnBC,YAAmB,MAAd,SAAc,EACvC,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,OAAOC,MAAO,CAAEC,aAAc,KAC1C,kBAACC,EAAA,EAAD,CAASH,UAAU,aAAaI,KAAG,EAACC,MAAM,OAAOC,IAAKT,EAAOU,MAAOC,IAAI,iBAAiBP,MAAO,CAAEQ,oBAAqB,GAAIC,qBAAsB,MACjJ,kBAACC,EAAA,EAAD,CAAUX,UAAU,aACpB,kBAACY,EAAA,EAAD,CAAWZ,UAAU,OAAOH,EAAOgB,MACnC,kBAACC,EAAA,EAAD,CAAcd,UAAU,OAAOF,GAC/B,kBAACiB,EAAA,EAAD,CAAUf,UAAU,OAAOH,EAAOmB,gBCsB/BC,EAxBK,WAAO,IAAD,EAEMC,mBAAS,IAFf,mBAEfrB,EAFe,KAEPsB,EAFO,KAIhBC,EAAW,uCAAG,4BAAAC,EAAA,sEACMC,IAAMC,IAAI,0CADhB,OACVC,EADU,OAEhBC,QAAQC,IAAI,WAAYF,EAAQG,MAEhCR,EAAUK,EAAQG,MAJF,2CAAH,qDAUjB,OAHAC,qBAAU,WACNR,MACC,IAED,kBAACS,EAAA,EAAD,CAAa7B,UAAU,gBAClBH,GAAUA,EAAOiC,OAAO,EAAIjC,EAAOkC,KAAI,SAAAC,GACrC,OAAO,kBAAC,EAAD,CAAOnC,OAAUmC,OAE7B,e,wDCaKC,MA7Bf,WAEE,OADAC,SAASC,KAAKlC,MAAMmC,gBAAkB,oBAEpC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKrC,MAAO,CAAEsC,OAAO,UACnB,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,0BAAM3C,UAAU,eAAc,kBAAC,IAAD,CAAUA,UAAU,WAAlD,uCAOR,kBAACwC,EAAA,EAAD,CAAKxC,UAAU,QAAQC,MAAO,CAAC2C,UAAU,UACzC,2CACA,iDAGF,kBAACN,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KAAK,kBAAC,EAAD,UCvBOK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.837fe95b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {    Card, Button, CardImg, CardTitle, CardText, CardColumns,\r\n    CardSubtitle, CardBody, Container, Row, Col} from 'reactstrap'\r\nimport '../App.css'\r\n\r\nconst Cards = ({recipe, time='1.5 hr'}) => {\r\n    return (\r\n        <Card className='card' style={{ borderRadius: 15}}>\r\n            <CardImg className='card-image' top width=\"100%\" src={recipe.image} alt=\"Card image cap\" style={{ borderTopLeftRadius: 15, borderTopRightRadius: 15 }}/>\r\n            <CardBody className='card-body'>\r\n            <CardTitle className='txt'>{recipe.name}</CardTitle>\r\n            <CardSubtitle className='txt'>{time}</CardSubtitle>\r\n            <CardText className='txt'>{recipe.description}</CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Cards;","import React, {useState, useEffect} from 'react';\r\nimport {\r\n    Card, Button, CardImg, CardTitle, CardText, CardColumns,\r\n    CardSubtitle, CardBody, Container, Row, Col\r\n  } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Axios from 'axios';\r\nimport Cards from \"./Cards\";\r\nimport '../App.css'\r\n\r\nconst CardSection = () => {\r\n\r\n    const [recipe, setRecipe] = useState([])\r\n\r\n    const fetchRecipe = async() => {\r\n        const results = await Axios.get('http://starlord.hackerearth.com/recipe')\r\n        console.log('RESPONSE', results.data);\r\n\r\n        setRecipe(results.data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchRecipe()\r\n      }, [])\r\n    return (\r\n        <CardColumns className='card-section'>\r\n            {recipe && recipe.length>0 ? recipe.map(item => {\r\n               return <Cards recipe = {item}/>\r\n            })\r\n        : 'Loading...'}\r\n        </CardColumns>\r\n    );\r\n};\r\n\r\nexport default CardSection;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CardSection from './components/CardSection';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Row, Col, Container,        FormGroup,\n  Input,\n  Button,\n  Form,\n  InputGroup,\n  InputGroupAddon } from \"reactstrap\";\n  import {FaCheckDouble, FaSearch} from 'react-icons/fa'\n\nfunction App() {\n  document.body.style.backgroundColor = \"rgb(190, 190, 190\";\n  return (\n    <Container>\n      <Row style={{ height:'150px'}}>\n        <Col>        \n        <Form>\n            <FormGroup>\n                <InputGroup>\n                <span className='search-text'><FaSearch className='search'/>\n                Search your favorite recipe... </span>\n                                 \n                </InputGroup>\n                \n            </FormGroup>\n        </Form></Col>\n        <Col className='pizza' style={{textAlign:'right'}}>\n        <small>Category</small>\n        <h1>Pizza & Noodles</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col><CardSection/></Col>\n      </Row>\n    </Container>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}